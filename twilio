import os
import re
import requests
from dotenv import load_dotenv
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from base64 import b64encode

# Cargar variables de entorno desde un archivo .env
load_dotenv()

# Definir la aplicación Flask
app = Flask(__name__)

# Configurar la autenticación para Twilio
account_sid = os.getenv("ACb081862bab604e65c81ffc8c82151504D")
auth_token = os.getenv("252a7b8547c46fb1f22559eafa87fc2d")
auth_str = f"{account_sid}:{auth_token}"
auth_bytes = auth_str.encode('utf-8')
auth_b64 = b64encode(auth_bytes).decode('utf-8')
headers = {'Authorization': 'Basic ' + auth_b64}

# Enumeración de estados
class Estados:
    SALUDO = 0
    PEDIR_CEDULA = 1
    CONFIRMAR_CEDULA = 2
    PEDIR_IMAGEN = 3
    DESPEDIDA = 4

# Diccionario para mapear estados a funciones de manejo
handlers = {
    Estados.SALUDO: lambda msg: handle_saludo(msg),
    Estados.PEDIR_CEDULA: lambda msg: handle_pedir_cedula(msg),
    Estados.CONFIRMAR_CEDULA: lambda msg: handle_confirmar_cedula(msg),
    Estados.PEDIR_IMAGEN: lambda media_url: handle_pedir_imagen(media_url),
    Estados.DESPEDIDA: lambda msg: handle_despedida(msg)
}

# Estado inicial
current_state = Estados.SALUDO

# Función para manejar el saludo
def handle_saludo(message):
    saludos_clave = [r"hol+", r"saludos+", r"buenas+"]
    for saludo in saludos_clave:
        if re.search(saludo, message, re.IGNORECASE):
            return "Hola, bienvenido a Tu Factura Paga. Para iniciar, por favor, ingresa tu número de cédula. Sin puntos, ni comas. \n Recuerda que las fotos de tus facturas deben de contener : cédula legible, fecha de expedición de la factura y lista de productos de acuerdo a los términos y condiciones: \n  https://www.misede.com/trminos-y-condiciones-tu-factura-paga"

# Función para manejar la solicitud de cédula
def handle_pedir_cedula(message):
    if message.isdigit():
        return f"La cédula ingresada es: {message}. ¿Está correcta? Responde 'si' o 'no'."
    else:
        return "Por favor, ingresa un número de cédula válido. Sin puntos, ni comas."

# Función para manejar la confirmación de cédula
def handle_confirmar_cedula(message):
    afirmativas_clave = [r"si+", r"yes+", r"sí+"]
    if any(re.search(afirmativa, message, re.IGNORECASE) for afirmativa in afirmativas_clave):
        return "Por favor, envía una imagen de tu factura."
    elif message.lower() == "no":
        return "Por favor, ingresa nuevamente tu número de cédula."

# Función para manejar la solicitud de imagen
def handle_pedir_imagen(media_url):
    if media_url:
        r = requests.get(media_url, headers=headers)
        content_type = r.headers['Content-Type']
        id = r.headers['X-Amz-Cf-Id']

        if content_type.startswith('image/'):
            extension = content_type.split('/')[1]
            # Aquí puedes guardar la imagen en tu sistema de archivos si lo deseas
            return 'Gracias por enviar la imagen de tu factura. Para recibir tu bono, recuerda enviar mínimo 5 facturas antes del 15/07/2025.'
        else:
            return 'El archivo que has subido no es del tipo imagen: jpg, png'

# Función para manejar la despedida
def handle_despedida(message):
    return "Gracias por utilizar nuestro servicio."

# Función para responder los mensajes
def respond(message, media=None):
    response = MessagingResponse()
    if media:
        for img in media:
            response.message(img)
    response.message(message)
    return str(response)

# Ruta para manejar las solicitudes POST de Twilio
@app.route('/message', methods=['POST'])
def reply():
    global current_state
    sender = request.form.get('From')
    message = request.form.get('Body')
    media_url = request.form.get('MediaUrl0')

    # Manejar el estado actual
    handler = handlers[current_state]
    response = handler(message)
    if response:
        return respond(response, media_url)

    # Si no se pudo manejar la solicitud
    else:
        return respond('Lo siento, ocurrió un error. Por favor, intenta nuevamente.')

# Ejecutar la aplicación Flask
if __name__ == '__main__':
    app.run(debug=True)
